#include <stdio.h>
#include <stdlib.h>

typedef struct tree
{
    int broj;
    struct tree* levo;
    struct tree* desno;
}tree;

void dodaj(tree **koren, int broj){
    if(*koren == NULL){
        tree *novi = (tree*)malloc(sizeof(tree));
        novi->broj = broj;
        novi->desno = NULL;
        novi->levo = NULL;
        *koren = novi;
    }
    else if((*koren)->broj > broj)
       dodaj(&(*koren)->levo, broj); 
    else
        dodaj(&(*koren)->desno, broj);
}

void ispis_LKD(tree *koren){
    if(koren != NULL){
        ispis_LKD(koren->levo);
        printf("%d ", koren->broj);
        ispis_LKD(koren->desno);
    }
}

int min(tree *koren){
    if(koren->levo == NULL)
        return koren->broj;
    return min(koren->levo);
}

int max(int a, int b){
    if(a > b)
        return a;
    return b;
}

int postoji(tree *koren, int a){
    if(koren == NULL)
        return 0;
    if(koren->broj == a)
        return 1;
    if(koren->broj < a)
        return postoji(koren->desno, a);
    else
        return postoji(koren->levo, a);
}

int maxDepth(tree * root)
{
  // Root being null means tree doesn't exist.
  if (root == NULL)
    return 0;
  
  // Get the depth of the left and right subtree 
  // using recursion.
  int leftDepth = maxDepth(root->levo);
  int rightDepth = maxDepth(root->desno);

  // Choose the larger one and add the root to it.
  if (leftDepth > rightDepth)
    return leftDepth + 1;
  else
    return rightDepth + 1;
}

int br_desno(tree *koren){
    int br = 0;
    if(koren != NULL)
        while(koren->desno != NULL){
            br++;
            koren = koren->desno;
        }
    return br;
}

int brojListova(tree *koren){
    if(koren == NULL)
        return 0;
    if(koren->desno == NULL && koren->levo == NULL)
        return 1;
    else
        return brojListova(koren->levo) + brojListova(koren->desno);
}

void zbirGrana(tree *koren, int a[], int *i, int sum){

    if(koren == NULL) return;

    if(koren->levo == NULL && koren->desno == NULL){
        a[*i] = sum + koren->broj;
        *i += 1;
        return;
    }

    sum += koren->broj;
    zbirGrana(koren->levo, a, i, sum);
    zbirGrana(koren->desno, a, i, sum);

}

int duzGrande(tree *koren){
    if(koren == NULL) return 0;
    if(koren->levo == NULL && koren->desno == NULL) return 1;
    else
        return max(duzGrande(koren->levo)+1, duzGrande(koren->desno)+1);
    
}

void nizz(tree *koren, int b[], int *i){
    if(koren == NULL) return;
    if(koren->levo == NULL && koren->desno == NULL) return;
    else{
        int l =  duzGrande(koren->levo) + 1;
        int d = duzGrande(koren->desno)+ 1;
        if(l > d){
            b[*i] = koren->levo->broj;
            *i += 1;
            nizz(koren->levo, b, i);
        }
        else{
            b[*i] = koren->desno->broj;
            *i += 1;
            nizz(koren->desno, b, i);
        }
    }    
}

int nizzz(tree *koren, int h){
    if(koren == NULL) return 0;
    if(h == 0)
        return koren->broj;
    else
        return max(nizzz(koren->levo, h-1), nizzz(koren->desno, h-1));
}

void stablo_u_niz(tree *koren, int a[], int *i){
    if(koren == NULL) return;
    stablo_u_niz(koren->levo, a, i);
    a[*i] = koren->broj;
    *i += 1;
    stablo_u_niz(koren->desno, a, i);
}

int main(){
    tree *koren = NULL;

    int n, a, sr = 0;
    scanf("%d", &n);
    for(int i=0; i<n; i++){
        scanf("%d", &a);
        sr += a;
        dodaj(&koren, a);
    }
    
    sr /= n;
    int max = koren->broj, tmp;
    
    printf("sortirani niz: ");
    int bruh_niz[n];
    int j = 0;
    stablo_u_niz(koren, bruh_niz, &j);
    for(int i=0; i<n; i++)
        printf("%d ", bruh_niz[i]);
    printf("\n");
    
    n = brojListova(koren);
    int niz[n];

    int br = 0;
    zbirGrana(koren, niz, &br, 0);

    //for (int i = 0; i < n; i++)
    //    printf("%d ", niz[i]);
    
    int m = duzGrande(koren);
    int b[m];
    
    b[0] = koren->broj;
    br = 1;
    nizz(koren, b, &br);
    for (int i = 0; i < m; i++)
        printf("%d ", b[i]);
    printf("\n");
    
    int h = maxDepth(koren);
    int c[h];
    for (int i = 0; i < h; i++)
        c[i] = nizzz(koren, i);
    
    printf("c: \n");
    for (int i = 0; i < h; i++)
        printf("%d ", c[i]);
    
    return 0;
}
